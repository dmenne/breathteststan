<<<<<<< HEAD
[{"path":"https://dmenne.github.io/breathteststan/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dieter Menne. Author, maintainer. Menne Biomed Consulting Tuebingen. Copyright holder. Benjamin Misselwitz. Funder. Mark Fox. Funder. University Hospital Zurich, Dep. Gastroenterology. Funder, data contributor.","code":""},{"path":"https://dmenne.github.io/breathteststan/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Menne D (2022). breathteststan: Stan-Based Fit Gastric Emptying Curves. https://github.com/dmenne/breathteststan, https://dmenne.github.io/breathteststan/.","code":"@Manual{,   title = {breathteststan: Stan-Based Fit to Gastric Emptying Curves},   author = {Dieter Menne},   year = {2022},   note = {https://github.com/dmenne/breathteststan, https://dmenne.github.io/breathteststan/}, }"},{"path":"https://dmenne.github.io/breathteststan/index.html","id":"breathteststan-bayesian-fit-to-13c-breath-test-time-series-for-gastric-emptying","dir":"","previous_headings":"","what":"Stan-Based Fit to Gastric Emptying Curves","title":"Stan-Based Fit to Gastric Emptying Curves","text":"Dieter Menne Menne Biomed Consulting Tübingen, Germanyhttps://www.menne-biomed.dedieter.menne@menne-biomed.de Dieter Menne Menne Biomed Consulting https://www.menne-biomed.de dieter.menne@menne-biomed.de Fit 13C time series data Bayesian methods using Stan. add-package breathtestcore. Stan functions moved package avoid long compile test times. test functions sample data data, try online demo.","code":""},{"path":"https://dmenne.github.io/breathteststan/reference/sigma.breathteststanfit.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 method to exctract the residual standard deviation — sigma.breathteststanfit","title":"S3 method to exctract the residual standard deviation — sigma.breathteststanfit","text":"Functions S3 method defined breathtestcore stan_fit stan_group fit.","code":""},{"path":"https://dmenne.github.io/breathteststan/reference/sigma.breathteststanfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 method to exctract the residual standard deviation — sigma.breathteststanfit","text":"","code":"# S3 method for breathteststanfit sigma(object, ...)"},{"path":"https://dmenne.github.io/breathteststan/reference/sigma.breathteststanfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 method to exctract the residual standard deviation — sigma.breathteststanfit","text":"object Stan-based fit ... used","code":""},{"path":"https://dmenne.github.io/breathteststan/reference/sigma.breathteststanfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 method to exctract the residual standard deviation — sigma.breathteststanfit","text":"numeric value giving sigma (= average residual standard deviation) term Stan fit.","code":""},{"path":"https://dmenne.github.io/breathteststan/reference/stan_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayesian Stan fit to 13C Breath Data — stan_fit","title":"Bayesian Stan fit to 13C Breath Data — stan_fit","text":"Fits exponential beta curves 13C breath test series data using Bayesian Stan methods. See https://menne-biomed.de/blog/breath-test-stan comparision single curve, mixed-model population Bayesian methods.","code":""},{"path":"https://dmenne.github.io/breathteststan/reference/stan_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayesian Stan fit to 13C Breath Data — stan_fit","text":"","code":"stan_fit(   data,   dose = 100,   sample_minutes = 15,   student_t_df = 10,   chains = 2,   iter = 1000,   model = \"breath_test_1\",   seed = 4711 )"},{"path":"https://dmenne.github.io/breathteststan/reference/stan_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayesian Stan fit to 13C Breath Data — stan_fit","text":"data Data frame tibble created cleanup_data, mandatory columns patient_id, group, minute pdr. recommended run data cleanup_data insert dummy columns patient_id minute data distinct, report error . Since Bayesian method stabilized priors, possible fit single curves. dose Dose acetate octanoate. Currently, one common dose records supported. sample_minutes mean sampling interval < sampleMinutes, data subsampled using spline algorithm student_t_df student_t_df < 10, student distribution used model residuals. Recommended values model typical outliers 3 6. student_t_df >= 10, normal distribution used. chains Number chains Stan iter Number iterations Stan chain model Name model; use names(stanmodels) models. seed Optional seed rstan","code":""},{"path":"https://dmenne.github.io/breathteststan/reference/stan_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bayesian Stan fit to 13C Breath Data — stan_fit","text":"list classes \"breathteststanfit\" \"breathtestfit\" elements coef Estimated parameters data frame key-value format    columns patient_id, group, parameter, method value.    attribute AIC. data  effectively analyzed data. density points    high, e.g. BreathId devices, data subsampled fitting. stan_fit Stan fit use shinystan::launch_shiny    extraction chains.","code":""},{"path":[]},{"path":"https://dmenne.github.io/breathteststan/reference/stan_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bayesian Stan fit to 13C Breath Data — stan_fit","text":"","code":"library(breathtestcore) suppressPackageStartupMessages(library(dplyr)) d = breathtestcore::simulate_breathtest_data(n_records = 3) # default 3 records data = breathtestcore::cleanup_data(d$data) # Use more than 80 iterations and 4 chains for serious fits fit = stan_fit(data, chains = 1, iter = 80) plot(fit) # calls plot.breathtestfit  # Extract coefficients and compare these with those # used to generate the data options(digits = 2) cf = coef(fit) cf %>%   filter(grepl(\"m|k|beta\", parameter )) %>%   select(-method, -group) %>%   tidyr::spread(parameter, value) %>%   inner_join(d$record, by = \"patient_id\") %>%   select(patient_id, m_in = m.y, m_out = m.x,          beta_in = beta.y, beta_out = beta.x,          k_in = k.y, k_out = k.x) #> # A tibble: 3 × 7 #>   patient_id  m_in m_out beta_in beta_out    k_in   k_out #>   <chr>      <dbl> <dbl>   <dbl>    <dbl>   <dbl>   <dbl> #> 1 rec_01        36  37.7    1.79     1.72 0.00691 0.00668 #> 2 rec_02        32  38.5    2.20     2.29 0.00801 0.00675 #> 3 rec_03        35  39.0    1.63     1.53 0.00807 0.00677 # For a detailed analysis of the fit, use the shinystan library # \\donttest{ library(shinystan) #> Loading required package: shiny #>  #> This is shinystan version 2.6.0 # launch_shinystan(fit$stan_fit) # } # The following plots are somewhat degenerate because # of the few iterations in stan_fit suppressPackageStartupMessages(library(rstan)) stan_plot(fit$stan_fit, pars = c(\"beta[1]\",\"beta[2]\",\"beta[3]\")) #> ci_level: 0.8 (80% intervals) #> outer_level: 0.95 (95% intervals)  stan_plot(fit$stan_fit, pars = c(\"k[1]\",\"k[2]\",\"k[3]\")) #> ci_level: 0.8 (80% intervals) #> outer_level: 0.95 (95% intervals)  stan_plot(fit$stan_fit, pars = c(\"m[1]\",\"m[2]\",\"m[3]\")) #> ci_level: 0.8 (80% intervals) #> outer_level: 0.95 (95% intervals)"}]
=======
[{"path":"https://dmenne.github.io/breathteststan/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dieter Menne. Author, maintainer. Menne Biomed Consulting Tuebingen. Copyright holder. Benjamin Misselwitz. Funder. Mark Fox. Funder. University Hospital Zurich, Dep. Gastroenterology. Funder, data contributor.","code":""},{"path":"https://dmenne.github.io/breathteststan/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Menne D (2024). breathteststan: Stan-Based Fit Gastric Emptying Curves. R package version 0.8.8, https://dmenne.github.io/breathteststan/, https://github.com/dmenne/breathteststan.","code":"@Manual{,   title = {breathteststan: Stan-Based Fit to Gastric Emptying Curves},   author = {Dieter Menne},   year = {2024},   note = {R package version 0.8.8,     https://dmenne.github.io/breathteststan/},   url = {https://github.com/dmenne/breathteststan}, }"},{"path":"https://dmenne.github.io/breathteststan/index.html","id":"breathteststan-bayesian-fit-to-13c-breath-test-time-series-for-gastric-emptying","dir":"","previous_headings":"","what":"Stan-Based Fit to Gastric Emptying Curves","title":"Stan-Based Fit to Gastric Emptying Curves","text":"Dieter Menne Menne Biomed Consulting Tübingen, Germanyhttps://www.menne-biomed.dedieter.menne@menne-biomed.de Dieter Menne Menne Biomed Consulting https://www.menne-biomed.de dieter.menne@menne-biomed.de Fit 13C time series data Bayesian methods using Stan. add-package breathtestcore. Stan functions moved package avoid long compile test times.","code":""},{"path":"https://dmenne.github.io/breathteststan/reference/sigma.breathteststanfit.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 method to exctract the residual standard deviation — sigma.breathteststanfit","title":"S3 method to exctract the residual standard deviation — sigma.breathteststanfit","text":"Functions S3 method defined breathtestcore stan_fit stan_group fit.","code":""},{"path":"https://dmenne.github.io/breathteststan/reference/sigma.breathteststanfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 method to exctract the residual standard deviation — sigma.breathteststanfit","text":"","code":"# S3 method for class 'breathteststanfit' sigma(object, ...)"},{"path":"https://dmenne.github.io/breathteststan/reference/sigma.breathteststanfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 method to exctract the residual standard deviation — sigma.breathteststanfit","text":"object Stan-based fit ... used","code":""},{"path":"https://dmenne.github.io/breathteststan/reference/sigma.breathteststanfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 method to exctract the residual standard deviation — sigma.breathteststanfit","text":"numeric value giving sigma (= average residual standard deviation) term Stan fit.","code":""},{"path":"https://dmenne.github.io/breathteststan/reference/stan_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayesian Stan fit to 13C Breath Data — stan_fit","title":"Bayesian Stan fit to 13C Breath Data — stan_fit","text":"Fits exponential beta curves 13C breath test series data using Bayesian Stan methods. See https://menne-biomed.de/blog/breath-test-stan comparision single curve, mixed-model population Bayesian methods.","code":""},{"path":"https://dmenne.github.io/breathteststan/reference/stan_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayesian Stan fit to 13C Breath Data — stan_fit","text":"","code":"stan_fit(   data,   dose = 100,   sample_minutes = 15,   student_t_df = 10,   chains = 2,   iter = 1000,   model = \"breath_test_1\",   seed = 4711 )"},{"path":"https://dmenne.github.io/breathteststan/reference/stan_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayesian Stan fit to 13C Breath Data — stan_fit","text":"data Data frame tibble created cleanup_data, mandatory columns patient_id, group, minute pdr. recommended run data cleanup_data insert dummy columns patient_id minute data distinct, report error . Since Bayesian method stabilized priors, possible fit single curves. dose Dose acetate octanoate. Currently, one common dose records supported. sample_minutes mean sampling interval < sampleMinutes, data subsampled using spline algorithm student_t_df student_t_df < 10, student distribution used model residuals. Recommended values model typical outliers 3 6. student_t_df >= 10, normal distribution used. chains Number chains Stan iter Number iterations Stan chain model Name model; use names(stanmodels) models. seed Optional seed rstan","code":""},{"path":"https://dmenne.github.io/breathteststan/reference/stan_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bayesian Stan fit to 13C Breath Data — stan_fit","text":"list classes \"breathteststanfit\" \"breathtestfit\" elements coef Estimated parameters data frame key-value format    columns patient_id, group, parameter, method value.    attribute AIC. data  effectively analyzed data. density points    high, e.g. BreathId devices, data subsampled fitting. stan_fit Stan fit use shinystan::launch_shiny    extraction chains.","code":""},{"path":[]},{"path":"https://dmenne.github.io/breathteststan/reference/stan_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bayesian Stan fit to 13C Breath Data — stan_fit","text":"","code":"library(breathtestcore) suppressPackageStartupMessages(library(dplyr)) d = breathtestcore::simulate_breathtest_data(n_records = 3) # default 3 records data = breathtestcore::cleanup_data(d$data) # Use more than 80 iterations and 4 chains for serious fits fit = stan_fit(data, chains = 1, iter = 80) plot(fit) # calls plot.breathtestfit  # Extract coefficients and compare these with those # used to generate the data options(digits = 2) cf = coef(fit) cf %>%   filter(grepl(\"m|k|beta\", parameter )) %>%   select(-method, -group) %>%   tidyr::spread(parameter, value) %>%   inner_join(d$record, by = \"patient_id\") %>%   select(patient_id, m_in = m.y, m_out = m.x,          beta_in = beta.y, beta_out = beta.x,          k_in = k.y, k_out = k.x) #> # A tibble: 3 × 7 #>   patient_id  m_in m_out beta_in beta_out    k_in  k_out #>   <chr>      <dbl> <dbl>   <dbl>    <dbl>   <dbl>  <dbl> #> 1 rec_01        26  23.9    1.27     1.35 0.00999 0.0114 #> 2 rec_02        43  42.2    1.90     1.93 0.0116  0.0119 #> 3 rec_03        16  16.3    1.90     1.84 0.0129  0.0124 # For a detailed analysis of the fit, use the shinystan library # \\donttest{ library(shinystan) #> Loading required package: shiny #>  #> This is shinystan version 2.6.0 # launch_shinystan(fit$stan_fit) # } # The following plots are somewhat degenerate because # of the few iterations in stan_fit suppressPackageStartupMessages(library(rstan)) stan_plot(fit$stan_fit, pars = c(\"beta[1]\",\"beta[2]\",\"beta[3]\")) #> ci_level: 0.8 (80% intervals) #> outer_level: 0.95 (95% intervals)  stan_plot(fit$stan_fit, pars = c(\"k[1]\",\"k[2]\",\"k[3]\")) #> ci_level: 0.8 (80% intervals) #> outer_level: 0.95 (95% intervals)  stan_plot(fit$stan_fit, pars = c(\"m[1]\",\"m[2]\",\"m[3]\")) #> ci_level: 0.8 (80% intervals) #> outer_level: 0.95 (95% intervals)"}]
>>>>>>> 57d44b02307cac535e1dbd474caa0be6d8dd9da3
